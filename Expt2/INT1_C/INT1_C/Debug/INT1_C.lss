
INT1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000530  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000336  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000195d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	19 c0       	rjmp	.+50     	; 0x38 <__vector_2>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	26 d1       	rcall	.+588    	; 0x280 <main>
  34:	4c c2       	rjmp	.+1176   	; 0x4ce <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_2>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR (INT1_vect)
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
  40:	0f 92       	push	r0
  42:	11 24       	eor	r1, r1
  44:	2f 93       	push	r18
  46:	3f 93       	push	r19
  48:	4f 93       	push	r20
  4a:	5f 93       	push	r21
  4c:	6f 93       	push	r22
  4e:	7f 93       	push	r23
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
  54:	af 93       	push	r26
  56:	bf 93       	push	r27
  58:	ef 93       	push	r30
  5a:	ff 93       	push	r31
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	6e 97       	sbiw	r28, 0x1e	; 30
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61
	int i;
	for (i=1;i<=10;i++) // for 10 times LED blink
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	9a 83       	std	Y+2, r25	; 0x02
  70:	89 83       	std	Y+1, r24	; 0x01
  72:	e6 c0       	rjmp	.+460    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>

	{
		PORTB=0x01;
  74:	88 e3       	ldi	r24, 0x38	; 56
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	fc 01       	movw	r30, r24
  7c:	20 83       	st	Z, r18
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	aa e7       	ldi	r26, 0x7A	; 122
  84:	b4 e4       	ldi	r27, 0x44	; 68
  86:	8b 83       	std	Y+3, r24	; 0x03
  88:	9c 83       	std	Y+4, r25	; 0x04
  8a:	ad 83       	std	Y+5, r26	; 0x05
  8c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	4a e7       	ldi	r20, 0x7A	; 122
  94:	53 e4       	ldi	r21, 0x43	; 67
  96:	6b 81       	ldd	r22, Y+3	; 0x03
  98:	7c 81       	ldd	r23, Y+4	; 0x04
  9a:	8d 81       	ldd	r24, Y+5	; 0x05
  9c:	9e 81       	ldd	r25, Y+6	; 0x06
  9e:	8c d1       	rcall	.+792    	; 0x3b8 <__mulsf3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	8d 8b       	std	Y+21, r24	; 0x15
  a6:	9e 8b       	std	Y+22, r25	; 0x16
  a8:	af 8b       	std	Y+23, r26	; 0x17
  aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	40 e8       	ldi	r20, 0x80	; 128
  b2:	5f e3       	ldi	r21, 0x3F	; 63
  b4:	6d 89       	ldd	r22, Y+21	; 0x15
  b6:	7e 89       	ldd	r23, Y+22	; 0x16
  b8:	8f 89       	ldd	r24, Y+23	; 0x17
  ba:	98 8d       	ldd	r25, Y+24	; 0x18
  bc:	fc d0       	rcall	.+504    	; 0x2b6 <__cmpsf2>
  be:	88 23       	and	r24, r24
  c0:	2c f4       	brge	.+10     	; 0xcc <__SREG__+0x8d>
		__ticks = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	9a 8f       	std	Y+26, r25	; 0x1a
  c8:	89 8f       	std	Y+25, r24	; 0x19
  ca:	3b c0       	rjmp	.+118    	; 0x142 <__SREG__+0x103>
	else if (__tmp > 65535)
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	3f ef       	ldi	r19, 0xFF	; 255
  d0:	4f e7       	ldi	r20, 0x7F	; 127
  d2:	57 e4       	ldi	r21, 0x47	; 71
  d4:	6d 89       	ldd	r22, Y+21	; 0x15
  d6:	7e 89       	ldd	r23, Y+22	; 0x16
  d8:	8f 89       	ldd	r24, Y+23	; 0x17
  da:	98 8d       	ldd	r25, Y+24	; 0x18
  dc:	69 d1       	rcall	.+722    	; 0x3b0 <__gesf2>
  de:	18 16       	cp	r1, r24
  e0:	3c f5       	brge	.+78     	; 0x130 <__SREG__+0xf1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	40 e2       	ldi	r20, 0x20	; 32
  e8:	51 e4       	ldi	r21, 0x41	; 65
  ea:	6b 81       	ldd	r22, Y+3	; 0x03
  ec:	7c 81       	ldd	r23, Y+4	; 0x04
  ee:	8d 81       	ldd	r24, Y+5	; 0x05
  f0:	9e 81       	ldd	r25, Y+6	; 0x06
  f2:	62 d1       	rcall	.+708    	; 0x3b8 <__mulsf3>
  f4:	dc 01       	movw	r26, r24
  f6:	cb 01       	movw	r24, r22
  f8:	bc 01       	movw	r22, r24
  fa:	cd 01       	movw	r24, r26
  fc:	e0 d0       	rcall	.+448    	; 0x2be <__fixunssfsi>
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	9a 8f       	std	Y+26, r25	; 0x1a
 104:	89 8f       	std	Y+25, r24	; 0x19
 106:	0f c0       	rjmp	.+30     	; 0x126 <__SREG__+0xe7>
 108:	89 e1       	ldi	r24, 0x19	; 25
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	9c 8f       	std	Y+28, r25	; 0x1c
 10e:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	8b 8d       	ldd	r24, Y+27	; 0x1b
 112:	9c 8d       	ldd	r25, Y+28	; 0x1c
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <__SREG__+0xd5>
 118:	9c 8f       	std	Y+28, r25	; 0x1c
 11a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11c:	89 8d       	ldd	r24, Y+25	; 0x19
 11e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	9a 8f       	std	Y+26, r25	; 0x1a
 124:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	89 8d       	ldd	r24, Y+25	; 0x19
 128:	9a 8d       	ldd	r25, Y+26	; 0x1a
 12a:	89 2b       	or	r24, r25
 12c:	69 f7       	brne	.-38     	; 0x108 <__SREG__+0xc9>
 12e:	13 c0       	rjmp	.+38     	; 0x156 <__SREG__+0x117>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 130:	6d 89       	ldd	r22, Y+21	; 0x15
 132:	7e 89       	ldd	r23, Y+22	; 0x16
 134:	8f 89       	ldd	r24, Y+23	; 0x17
 136:	98 8d       	ldd	r25, Y+24	; 0x18
 138:	c2 d0       	rcall	.+388    	; 0x2be <__fixunssfsi>
 13a:	dc 01       	movw	r26, r24
 13c:	cb 01       	movw	r24, r22
 13e:	9a 8f       	std	Y+26, r25	; 0x1a
 140:	89 8f       	std	Y+25, r24	; 0x19
 142:	89 8d       	ldd	r24, Y+25	; 0x19
 144:	9a 8d       	ldd	r25, Y+26	; 0x1a
 146:	9e 8f       	std	Y+30, r25	; 0x1e
 148:	8d 8f       	std	Y+29, r24	; 0x1d
 14a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 14c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <__SREG__+0x10f>
 152:	9e 8f       	std	Y+30, r25	; 0x1e
 154:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);   // delay of 1 sec
		PORTB=0x00;
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	aa e7       	ldi	r26, 0x7A	; 122
 164:	b4 e4       	ldi	r27, 0x44	; 68
 166:	8f 83       	std	Y+7, r24	; 0x07
 168:	98 87       	std	Y+8, r25	; 0x08
 16a:	a9 87       	std	Y+9, r26	; 0x09
 16c:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	4a e7       	ldi	r20, 0x7A	; 122
 174:	53 e4       	ldi	r21, 0x43	; 67
 176:	6f 81       	ldd	r22, Y+7	; 0x07
 178:	78 85       	ldd	r23, Y+8	; 0x08
 17a:	89 85       	ldd	r24, Y+9	; 0x09
 17c:	9a 85       	ldd	r25, Y+10	; 0x0a
 17e:	1c d1       	rcall	.+568    	; 0x3b8 <__mulsf3>
 180:	dc 01       	movw	r26, r24
 182:	cb 01       	movw	r24, r22
 184:	8b 87       	std	Y+11, r24	; 0x0b
 186:	9c 87       	std	Y+12, r25	; 0x0c
 188:	ad 87       	std	Y+13, r26	; 0x0d
 18a:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	6b 85       	ldd	r22, Y+11	; 0x0b
 196:	7c 85       	ldd	r23, Y+12	; 0x0c
 198:	8d 85       	ldd	r24, Y+13	; 0x0d
 19a:	9e 85       	ldd	r25, Y+14	; 0x0e
 19c:	8c d0       	rcall	.+280    	; 0x2b6 <__cmpsf2>
 19e:	88 23       	and	r24, r24
 1a0:	2c f4       	brge	.+10     	; 0x1ac <__SREG__+0x16d>
		__ticks = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	98 8b       	std	Y+16, r25	; 0x10
 1a8:	8f 87       	std	Y+15, r24	; 0x0f
 1aa:	3b c0       	rjmp	.+118    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
	else if (__tmp > 65535)
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	3f ef       	ldi	r19, 0xFF	; 255
 1b0:	4f e7       	ldi	r20, 0x7F	; 127
 1b2:	57 e4       	ldi	r21, 0x47	; 71
 1b4:	6b 85       	ldd	r22, Y+11	; 0x0b
 1b6:	7c 85       	ldd	r23, Y+12	; 0x0c
 1b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1ba:	9e 85       	ldd	r25, Y+14	; 0x0e
 1bc:	f9 d0       	rcall	.+498    	; 0x3b0 <__gesf2>
 1be:	18 16       	cp	r1, r24
 1c0:	3c f5       	brge	.+78     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e2       	ldi	r20, 0x20	; 32
 1c8:	51 e4       	ldi	r21, 0x41	; 65
 1ca:	6f 81       	ldd	r22, Y+7	; 0x07
 1cc:	78 85       	ldd	r23, Y+8	; 0x08
 1ce:	89 85       	ldd	r24, Y+9	; 0x09
 1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d2:	f2 d0       	rcall	.+484    	; 0x3b8 <__mulsf3>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	bc 01       	movw	r22, r24
 1da:	cd 01       	movw	r24, r26
 1dc:	70 d0       	rcall	.+224    	; 0x2be <__fixunssfsi>
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
 1e2:	98 8b       	std	Y+16, r25	; 0x10
 1e4:	8f 87       	std	Y+15, r24	; 0x0f
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 1e8:	89 e1       	ldi	r24, 0x19	; 25
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9a 8b       	std	Y+18, r25	; 0x12
 1ee:	89 8b       	std	Y+17, r24	; 0x11
 1f0:	89 89       	ldd	r24, Y+17	; 0x11
 1f2:	9a 89       	ldd	r25, Y+18	; 0x12
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <__SREG__+0x1b5>
 1f8:	9a 8b       	std	Y+18, r25	; 0x12
 1fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fc:	8f 85       	ldd	r24, Y+15	; 0x0f
 1fe:	98 89       	ldd	r25, Y+16	; 0x10
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	98 8b       	std	Y+16, r25	; 0x10
 204:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 206:	8f 85       	ldd	r24, Y+15	; 0x0f
 208:	98 89       	ldd	r25, Y+16	; 0x10
 20a:	89 2b       	or	r24, r25
 20c:	69 f7       	brne	.-38     	; 0x1e8 <__SREG__+0x1a9>
 20e:	13 c0       	rjmp	.+38     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 210:	6b 85       	ldd	r22, Y+11	; 0x0b
 212:	7c 85       	ldd	r23, Y+12	; 0x0c
 214:	8d 85       	ldd	r24, Y+13	; 0x0d
 216:	9e 85       	ldd	r25, Y+14	; 0x0e
 218:	52 d0       	rcall	.+164    	; 0x2be <__fixunssfsi>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	98 8b       	std	Y+16, r25	; 0x10
 220:	8f 87       	std	Y+15, r24	; 0x0f
 222:	8f 85       	ldd	r24, Y+15	; 0x0f
 224:	98 89       	ldd	r25, Y+16	; 0x10
 226:	9c 8b       	std	Y+20, r25	; 0x14
 228:	8b 8b       	std	Y+19, r24	; 0x13
 22a:	8b 89       	ldd	r24, Y+19	; 0x13
 22c:	9c 89       	ldd	r25, Y+20	; 0x14
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 232:	9c 8b       	std	Y+20, r25	; 0x14
 234:	8b 8b       	std	Y+19, r24	; 0x13
#include <avr/interrupt.h>

ISR (INT1_vect)
{
	int i;
	for (i=1;i<=10;i++) // for 10 times LED blink
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	89 83       	std	Y+1, r24	; 0x01
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	0b 97       	sbiw	r24, 0x0b	; 11
 246:	0c f4       	brge	.+2      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 248:	15 cf       	rjmp	.-470    	; 0x74 <__SREG__+0x35>
		_delay_ms(1000);
		
	}
	
	
}
 24a:	00 00       	nop
 24c:	6e 96       	adiw	r28, 0x1e	; 30
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <main>:
int main(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	//Set the input/output pins appropriately
	//To enable interrupt and port interfacing
	//For LED to blink
	DDRD=0x00;   //Set appropriate data direction for D
 288:	81 e3       	ldi	r24, 0x31	; 49
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	10 82       	st	Z, r1
	DDRB=0x00;   //Make PB0 as output
 290:	87 e3       	ldi	r24, 0x37	; 55
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	10 82       	st	Z, r1
	MCUCR=0x00;  //Set MCUCR to level triggered
 298:	85 e5       	ldi	r24, 0x55	; 85
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	10 82       	st	Z, r1
	GICR=0x80;   //Enable interrupt 1
 2a0:	8b e5       	ldi	r24, 0x5B	; 91
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	20 e8       	ldi	r18, 0x80	; 128
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
	PORTB=0x00;
 2aa:	88 e3       	ldi	r24, 0x38	; 56
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	10 82       	st	Z, r1
	sei();       // global interrupt flag
 2b2:	78 94       	sei

	while (1) //wait
	{

	}
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x34>

000002b6 <__cmpsf2>:
 2b6:	2f d0       	rcall	.+94     	; 0x316 <__fp_cmp>
 2b8:	08 f4       	brcc	.+2      	; 0x2bc <__cmpsf2+0x6>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret

000002be <__fixunssfsi>:
 2be:	57 d0       	rcall	.+174    	; 0x36e <__fp_splitA>
 2c0:	88 f0       	brcs	.+34     	; 0x2e4 <__fixunssfsi+0x26>
 2c2:	9f 57       	subi	r25, 0x7F	; 127
 2c4:	90 f0       	brcs	.+36     	; 0x2ea <__fixunssfsi+0x2c>
 2c6:	b9 2f       	mov	r27, r25
 2c8:	99 27       	eor	r25, r25
 2ca:	b7 51       	subi	r27, 0x17	; 23
 2cc:	a0 f0       	brcs	.+40     	; 0x2f6 <__fixunssfsi+0x38>
 2ce:	d1 f0       	breq	.+52     	; 0x304 <__fixunssfsi+0x46>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	88 1f       	adc	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	1a f0       	brmi	.+6      	; 0x2e0 <__fixunssfsi+0x22>
 2da:	ba 95       	dec	r27
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <__fixunssfsi+0x12>
 2de:	12 c0       	rjmp	.+36     	; 0x304 <__fixunssfsi+0x46>
 2e0:	b1 30       	cpi	r27, 0x01	; 1
 2e2:	81 f0       	breq	.+32     	; 0x304 <__fixunssfsi+0x46>
 2e4:	5e d0       	rcall	.+188    	; 0x3a2 <__fp_zero>
 2e6:	b1 e0       	ldi	r27, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	5b c0       	rjmp	.+182    	; 0x3a2 <__fp_zero>
 2ec:	67 2f       	mov	r22, r23
 2ee:	78 2f       	mov	r23, r24
 2f0:	88 27       	eor	r24, r24
 2f2:	b8 5f       	subi	r27, 0xF8	; 248
 2f4:	39 f0       	breq	.+14     	; 0x304 <__fixunssfsi+0x46>
 2f6:	b9 3f       	cpi	r27, 0xF9	; 249
 2f8:	cc f3       	brlt	.-14     	; 0x2ec <__fixunssfsi+0x2e>
 2fa:	86 95       	lsr	r24
 2fc:	77 95       	ror	r23
 2fe:	67 95       	ror	r22
 300:	b3 95       	inc	r27
 302:	d9 f7       	brne	.-10     	; 0x2fa <__fixunssfsi+0x3c>
 304:	3e f4       	brtc	.+14     	; 0x314 <__fixunssfsi+0x56>
 306:	90 95       	com	r25
 308:	80 95       	com	r24
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	08 95       	ret

00000316 <__fp_cmp>:
 316:	99 0f       	add	r25, r25
 318:	00 08       	sbc	r0, r0
 31a:	55 0f       	add	r21, r21
 31c:	aa 0b       	sbc	r26, r26
 31e:	e0 e8       	ldi	r30, 0x80	; 128
 320:	fe ef       	ldi	r31, 0xFE	; 254
 322:	16 16       	cp	r1, r22
 324:	17 06       	cpc	r1, r23
 326:	e8 07       	cpc	r30, r24
 328:	f9 07       	cpc	r31, r25
 32a:	c0 f0       	brcs	.+48     	; 0x35c <__fp_cmp+0x46>
 32c:	12 16       	cp	r1, r18
 32e:	13 06       	cpc	r1, r19
 330:	e4 07       	cpc	r30, r20
 332:	f5 07       	cpc	r31, r21
 334:	98 f0       	brcs	.+38     	; 0x35c <__fp_cmp+0x46>
 336:	62 1b       	sub	r22, r18
 338:	73 0b       	sbc	r23, r19
 33a:	84 0b       	sbc	r24, r20
 33c:	95 0b       	sbc	r25, r21
 33e:	39 f4       	brne	.+14     	; 0x34e <__fp_cmp+0x38>
 340:	0a 26       	eor	r0, r26
 342:	61 f0       	breq	.+24     	; 0x35c <__fp_cmp+0x46>
 344:	23 2b       	or	r18, r19
 346:	24 2b       	or	r18, r20
 348:	25 2b       	or	r18, r21
 34a:	21 f4       	brne	.+8      	; 0x354 <__fp_cmp+0x3e>
 34c:	08 95       	ret
 34e:	0a 26       	eor	r0, r26
 350:	09 f4       	brne	.+2      	; 0x354 <__fp_cmp+0x3e>
 352:	a1 40       	sbci	r26, 0x01	; 1
 354:	a6 95       	lsr	r26
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	81 1d       	adc	r24, r1
 35a:	81 1d       	adc	r24, r1
 35c:	08 95       	ret

0000035e <__fp_split3>:
 35e:	57 fd       	sbrc	r21, 7
 360:	90 58       	subi	r25, 0x80	; 128
 362:	44 0f       	add	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	59 f0       	breq	.+22     	; 0x37e <__fp_splitA+0x10>
 368:	5f 3f       	cpi	r21, 0xFF	; 255
 36a:	71 f0       	breq	.+28     	; 0x388 <__fp_splitA+0x1a>
 36c:	47 95       	ror	r20

0000036e <__fp_splitA>:
 36e:	88 0f       	add	r24, r24
 370:	97 fb       	bst	r25, 7
 372:	99 1f       	adc	r25, r25
 374:	61 f0       	breq	.+24     	; 0x38e <__fp_splitA+0x20>
 376:	9f 3f       	cpi	r25, 0xFF	; 255
 378:	79 f0       	breq	.+30     	; 0x398 <__fp_splitA+0x2a>
 37a:	87 95       	ror	r24
 37c:	08 95       	ret
 37e:	12 16       	cp	r1, r18
 380:	13 06       	cpc	r1, r19
 382:	14 06       	cpc	r1, r20
 384:	55 1f       	adc	r21, r21
 386:	f2 cf       	rjmp	.-28     	; 0x36c <__fp_split3+0xe>
 388:	46 95       	lsr	r20
 38a:	f1 df       	rcall	.-30     	; 0x36e <__fp_splitA>
 38c:	08 c0       	rjmp	.+16     	; 0x39e <__fp_splitA+0x30>
 38e:	16 16       	cp	r1, r22
 390:	17 06       	cpc	r1, r23
 392:	18 06       	cpc	r1, r24
 394:	99 1f       	adc	r25, r25
 396:	f1 cf       	rjmp	.-30     	; 0x37a <__fp_splitA+0xc>
 398:	86 95       	lsr	r24
 39a:	71 05       	cpc	r23, r1
 39c:	61 05       	cpc	r22, r1
 39e:	08 94       	sec
 3a0:	08 95       	ret

000003a2 <__fp_zero>:
 3a2:	e8 94       	clt

000003a4 <__fp_szero>:
 3a4:	bb 27       	eor	r27, r27
 3a6:	66 27       	eor	r22, r22
 3a8:	77 27       	eor	r23, r23
 3aa:	cb 01       	movw	r24, r22
 3ac:	97 f9       	bld	r25, 7
 3ae:	08 95       	ret

000003b0 <__gesf2>:
 3b0:	b2 df       	rcall	.-156    	; 0x316 <__fp_cmp>
 3b2:	08 f4       	brcc	.+2      	; 0x3b6 <__gesf2+0x6>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	08 95       	ret

000003b8 <__mulsf3>:
 3b8:	0b d0       	rcall	.+22     	; 0x3d0 <__mulsf3x>
 3ba:	78 c0       	rjmp	.+240    	; 0x4ac <__fp_round>
 3bc:	69 d0       	rcall	.+210    	; 0x490 <__fp_pscA>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <__mulsf3+0x12>
 3c0:	6e d0       	rcall	.+220    	; 0x49e <__fp_pscB>
 3c2:	18 f0       	brcs	.+6      	; 0x3ca <__mulsf3+0x12>
 3c4:	95 23       	and	r25, r21
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__mulsf3+0x12>
 3c8:	5a c0       	rjmp	.+180    	; 0x47e <__fp_inf>
 3ca:	5f c0       	rjmp	.+190    	; 0x48a <__fp_nan>
 3cc:	11 24       	eor	r1, r1
 3ce:	ea cf       	rjmp	.-44     	; 0x3a4 <__fp_szero>

000003d0 <__mulsf3x>:
 3d0:	c6 df       	rcall	.-116    	; 0x35e <__fp_split3>
 3d2:	a0 f3       	brcs	.-24     	; 0x3bc <__mulsf3+0x4>

000003d4 <__mulsf3_pse>:
 3d4:	95 9f       	mul	r25, r21
 3d6:	d1 f3       	breq	.-12     	; 0x3cc <__mulsf3+0x14>
 3d8:	95 0f       	add	r25, r21
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	55 1f       	adc	r21, r21
 3de:	62 9f       	mul	r22, r18
 3e0:	f0 01       	movw	r30, r0
 3e2:	72 9f       	mul	r23, r18
 3e4:	bb 27       	eor	r27, r27
 3e6:	f0 0d       	add	r31, r0
 3e8:	b1 1d       	adc	r27, r1
 3ea:	63 9f       	mul	r22, r19
 3ec:	aa 27       	eor	r26, r26
 3ee:	f0 0d       	add	r31, r0
 3f0:	b1 1d       	adc	r27, r1
 3f2:	aa 1f       	adc	r26, r26
 3f4:	64 9f       	mul	r22, r20
 3f6:	66 27       	eor	r22, r22
 3f8:	b0 0d       	add	r27, r0
 3fa:	a1 1d       	adc	r26, r1
 3fc:	66 1f       	adc	r22, r22
 3fe:	82 9f       	mul	r24, r18
 400:	22 27       	eor	r18, r18
 402:	b0 0d       	add	r27, r0
 404:	a1 1d       	adc	r26, r1
 406:	62 1f       	adc	r22, r18
 408:	73 9f       	mul	r23, r19
 40a:	b0 0d       	add	r27, r0
 40c:	a1 1d       	adc	r26, r1
 40e:	62 1f       	adc	r22, r18
 410:	83 9f       	mul	r24, r19
 412:	a0 0d       	add	r26, r0
 414:	61 1d       	adc	r22, r1
 416:	22 1f       	adc	r18, r18
 418:	74 9f       	mul	r23, r20
 41a:	33 27       	eor	r19, r19
 41c:	a0 0d       	add	r26, r0
 41e:	61 1d       	adc	r22, r1
 420:	23 1f       	adc	r18, r19
 422:	84 9f       	mul	r24, r20
 424:	60 0d       	add	r22, r0
 426:	21 1d       	adc	r18, r1
 428:	82 2f       	mov	r24, r18
 42a:	76 2f       	mov	r23, r22
 42c:	6a 2f       	mov	r22, r26
 42e:	11 24       	eor	r1, r1
 430:	9f 57       	subi	r25, 0x7F	; 127
 432:	50 40       	sbci	r21, 0x00	; 0
 434:	8a f0       	brmi	.+34     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 436:	e1 f0       	breq	.+56     	; 0x470 <__stack+0x11>
 438:	88 23       	and	r24, r24
 43a:	4a f0       	brmi	.+18     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	bb 1f       	adc	r27, r27
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	50 40       	sbci	r21, 0x00	; 0
 44c:	a9 f7       	brne	.-22     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	51 05       	cpc	r21, r1
 452:	70 f0       	brcs	.+28     	; 0x470 <__stack+0x11>
 454:	14 c0       	rjmp	.+40     	; 0x47e <__fp_inf>
 456:	a6 cf       	rjmp	.-180    	; 0x3a4 <__fp_szero>
 458:	5f 3f       	cpi	r21, 0xFF	; 255
 45a:	ec f3       	brlt	.-6      	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 45c:	98 3e       	cpi	r25, 0xE8	; 232
 45e:	dc f3       	brlt	.-10     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 460:	86 95       	lsr	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f7 95       	ror	r31
 46a:	e7 95       	ror	r30
 46c:	9f 5f       	subi	r25, 0xFF	; 255
 46e:	c1 f7       	brne	.-16     	; 0x460 <__stack+0x1>
 470:	fe 2b       	or	r31, r30
 472:	88 0f       	add	r24, r24
 474:	91 1d       	adc	r25, r1
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret

0000047e <__fp_inf>:
 47e:	97 f9       	bld	r25, 7
 480:	9f 67       	ori	r25, 0x7F	; 127
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	08 95       	ret

0000048a <__fp_nan>:
 48a:	9f ef       	ldi	r25, 0xFF	; 255
 48c:	80 ec       	ldi	r24, 0xC0	; 192
 48e:	08 95       	ret

00000490 <__fp_pscA>:
 490:	00 24       	eor	r0, r0
 492:	0a 94       	dec	r0
 494:	16 16       	cp	r1, r22
 496:	17 06       	cpc	r1, r23
 498:	18 06       	cpc	r1, r24
 49a:	09 06       	cpc	r0, r25
 49c:	08 95       	ret

0000049e <__fp_pscB>:
 49e:	00 24       	eor	r0, r0
 4a0:	0a 94       	dec	r0
 4a2:	12 16       	cp	r1, r18
 4a4:	13 06       	cpc	r1, r19
 4a6:	14 06       	cpc	r1, r20
 4a8:	05 06       	cpc	r0, r21
 4aa:	08 95       	ret

000004ac <__fp_round>:
 4ac:	09 2e       	mov	r0, r25
 4ae:	03 94       	inc	r0
 4b0:	00 0c       	add	r0, r0
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__fp_round+0xc>
 4b4:	88 23       	and	r24, r24
 4b6:	52 f0       	brmi	.+20     	; 0x4cc <__fp_round+0x20>
 4b8:	bb 0f       	add	r27, r27
 4ba:	40 f4       	brcc	.+16     	; 0x4cc <__fp_round+0x20>
 4bc:	bf 2b       	or	r27, r31
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__fp_round+0x18>
 4c0:	60 ff       	sbrs	r22, 0
 4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__fp_round+0x20>
 4c4:	6f 5f       	subi	r22, 0xFF	; 255
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
